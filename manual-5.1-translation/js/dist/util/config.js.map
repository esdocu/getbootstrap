{"version":3,"file":"config.js","sources":["../../src/util/config.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): util/config.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { isElement, toType } from './index'\nimport Manipulator from '../dom/manipulator'\n\n/**\n * Class definition\n */\n\nclass Config {\n  // Getters\n  static get Default() {\n    return {}\n  }\n\n  static get DefaultType() {\n    return {}\n  }\n\n  static get NAME() {\n    throw new Error('You have to implement the static method \"NAME\", for each component!')\n  }\n\n  _getConfig(config) {\n    config = this._mergeConfigObj(config)\n    config = this._configAfterMerge(config)\n    this._typeCheckConfig(config)\n    return config\n  }\n\n  _configAfterMerge(config) {\n    return config\n  }\n\n  _mergeConfigObj(config, element) {\n    return {\n      ...this.constructor.Default,\n      ...(isElement(element) ? Manipulator.getDataAttributes(element) : {}),\n      ...(typeof config === 'object' ? config : {})\n    }\n  }\n\n  _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {\n    for (const property of Object.keys(configTypes)) {\n      const expectedTypes = configTypes[property]\n      const value = config[property]\n      const valueType = isElement(value) ? 'element' : toType(value)\n\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        throw new TypeError(\n          `${this.constructor.NAME.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`\n        )\n      }\n    }\n  }\n}\n\nexport default Config\n"],"names":["Config","Default","DefaultType","NAME","Error","_getConfig","config","_mergeConfigObj","_configAfterMerge","_typeCheckConfig","element","constructor","isElement","Manipulator","getDataAttributes","configTypes","property","Object","keys","expectedTypes","value","valueType","toType","RegExp","test","TypeError","toUpperCase"],"mappings":";;;;;;;;;;;;;;;EAAA;EACA;EACA;EACA;EACA;EACA;EAKA;EACA;EACA;;EAEA,MAAMA,MAAN,CAAa;EACX;EACkB,aAAPC,OAAO,GAAG;EACnB,WAAO,EAAP;EACD;;EAEqB,aAAXC,WAAW,GAAG;EACvB,WAAO,EAAP;EACD;;EAEc,aAAJC,IAAI,GAAG;EAChB,UAAM,IAAIC,KAAJ,CAAU,qEAAV,CAAN;EACD;;EAEDC,EAAAA,UAAU,CAACC,MAAD,EAAS;EACjBA,IAAAA,MAAM,GAAG,KAAKC,eAAL,CAAqBD,MAArB,CAAT;EACAA,IAAAA,MAAM,GAAG,KAAKE,iBAAL,CAAuBF,MAAvB,CAAT;;EACA,SAAKG,gBAAL,CAAsBH,MAAtB;;EACA,WAAOA,MAAP;EACD;;EAEDE,EAAAA,iBAAiB,CAACF,MAAD,EAAS;EACxB,WAAOA,MAAP;EACD;;EAEDC,EAAAA,eAAe,CAACD,MAAD,EAASI,OAAT,EAAkB;EAC/B,WAAO,EACL,GAAG,KAAKC,WAAL,CAAiBV,OADf;EAEL,UAAIW,eAAS,CAACF,OAAD,CAAT,GAAqBG,4BAAW,CAACC,iBAAZ,CAA8BJ,OAA9B,CAArB,GAA8D,EAAlE,CAFK;EAGL,UAAI,OAAOJ,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsC,EAA1C;EAHK,KAAP;EAKD;;EAEDG,EAAAA,gBAAgB,CAACH,MAAD,EAASS,WAAW,GAAG,KAAKJ,WAAL,CAAiBT,WAAxC,EAAqD;EACnE,SAAK,MAAMc,QAAX,IAAuBC,MAAM,CAACC,IAAP,CAAYH,WAAZ,CAAvB,EAAiD;EAC/C,YAAMI,aAAa,GAAGJ,WAAW,CAACC,QAAD,CAAjC;EACA,YAAMI,KAAK,GAAGd,MAAM,CAACU,QAAD,CAApB;EACA,YAAMK,SAAS,GAAGT,eAAS,CAACQ,KAAD,CAAT,GAAmB,SAAnB,GAA+BE,YAAM,CAACF,KAAD,CAAvD;;EAEA,UAAI,CAAC,IAAIG,MAAJ,CAAWJ,aAAX,EAA0BK,IAA1B,CAA+BH,SAA/B,CAAL,EAAgD;EAC9C,cAAM,IAAII,SAAJ,CACH,GAAE,KAAKd,WAAL,CAAiBR,IAAjB,CAAsBuB,WAAtB,EAAoC,aAAYV,QAAS,oBAAmBK,SAAU,wBAAuBF,aAAc,IAD1H,CAAN;EAGD;EACF;EACF;;EA7CU;;;;;;;;"}